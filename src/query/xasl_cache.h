/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

/*
 * XASL cache.
 */

#ifndef _XASL_CACHE_H_
#define _XASL_CACHE_H_

#ident "$Id$"

#include "query_list.h"
#include "query_opfunc.h"

/* This really belongs more to the query manager rather than query executor. */
/* XASL cache entry type definition */
typedef struct xasl_cache_ent XASL_CACHE_ENTRY;
struct xasl_cache_ent
{
  XASL_ID xasl_id;		/* XASL file identifier */
				/* Not really a file identifier anymore. Maybe we should rename this to XASL_KEY? */
  
  /* Latch-free stuff. */
  XASL_CACHE_ENTRY *stack;	/* used in freelist */
  XASL_CACHE_ENTRY *next;	/* used in hash table */
  /* Mutex may be addex here (hopefully it is not necessary). */
  UINT64 del_id;		/* delete transaction ID (for lock free) */


  EXECUTION_INFO sql_info;	/* cache entry hash key, user input string & plan */
  int xasl_header_flag;		/* XASL header info */
  OID *class_oid_list;	/* list of class/serial OIDs referenced in the XASL */
  int *class_locks;	/* Class locks */
  int *tcard_list;	/* list of #pages of the class OIDs */
  struct timeval time_created;	/* when this entry created */
  struct timeval time_last_used;	/* when this entry used lastly */
  int n_oid_list;		/* size of the class OID list */
  INT64 ref_count;		/* how many times this entry used */
  int list_ht_no;		/* memory hash table for query result(list file) cache generated by this XASL
				 * referencing by DB_VALUE parameters bound to the result */
};

extern int xcache_initialize (void);
extern void xcache_finalize (void);

extern int xcache_find_sha1 (THREAD_ENTRY * thread_p, const SHA1Hash * sha1, XASL_CACHE_ENTRY ** xcache_entry);
extern int xcache_find_xasl_id (THREAD_ENTRY * thread_p, const XASL_ID * xid, XASL_CACHE_ENTRY ** xcache_entry);
extern void xcache_unfix (THREAD_ENTRY * thread_p, XASL_CACHE_ENTRY * xcache_entry);
extern int xcache_insert (THREAD_ENTRY * thread_p, const COMPILE_CONTEXT * context, XASL_STREAM * stream,
			  const OID * oid, int n_oid, const OID * class_oids, const int * class_locks,
			  const int *tcards, XASL_CACHE_ENTRY ** xcache_entry);
extern void xcache_remove_by_oid (THREAD_ENTRY * thread_p, OID * oid);
extern void xcache_dump (THREAD_ENTRY * thread_p, FILE * fp);

extern bool xcache_can_entry_cache_list (XASL_CACHE_ENTRY * xcache_entry);
#endif /* _XASL_CACHE_H_ */
