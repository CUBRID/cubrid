/*
 * Copyright (C) 2008 Search Solution Corporation. All rights reserved by Search Solution.
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *
 */

/*
 * replication_stream_entry.hpp
 */

#ident "$Id$"

#ifndef _REPLICATION_STREAM_ENTRY_HPP_
#define _REPLICATION_STREAM_ENTRY_HPP_

#include "replication_object.hpp"
#include "stream_entry.hpp"
#include "storage_common.h"
#include <vector>

namespace cubreplication
{

  /* a replication stream entry is generated by a transaction or a group commit action */
  struct stream_entry_header
  {
    typedef enum
    {
      ACTIVE = 0,
      COMMITTED,
      ABORTED,
      GROUP_COMMIT
    } TRAN_STATE;

    const static unsigned STATE_BITS = 2;

    const static unsigned int STATE_MASK = 0xc0000000;

    const static unsigned int COUNT_VALUE_MASK = ~ (STATE_MASK);

    cubstream::stream_position prev_record;
    MVCCID mvccid;
    unsigned int count_replication_entries;
    int data_size;

    TRAN_STATE tran_state;

    stream_entry_header ()
      : prev_record (0),
	mvccid (MVCCID_NULL),
	count_replication_entries (0),
	data_size (0),
	tran_state (ACTIVE)
    {
    };

    static size_t get_size (cubpacking::packer &serializator)
    {
      size_t header_size = 0;

      header_size += serializator.get_packed_bigint_size (header_size);
      header_size += serializator.get_packed_bigint_size (header_size);
      header_size += serializator.get_packed_int_size (header_size);
      header_size += serializator.get_packed_int_size (header_size);

      return header_size;
    }
  };

  class stream_entry : public cubstream::entry<replication_object>
  {
    private:
      stream_entry_header m_header;
      cubpacking::packer m_serializator;
      cubpacking::unpacker m_deserializator;

    public:
      stream_entry (cubstream::multi_thread_stream *stream_p)
	: entry (stream_p)
	, m_serializator ()
	, m_deserializator ()
      {
      };

      stream_entry (cubstream::multi_thread_stream *stream_p,
		    MVCCID arg_mvccid,
		    stream_entry_header::TRAN_STATE state)
	: entry (stream_p)
	, m_serializator ()
	, m_deserializator ()
      {
	m_header.mvccid = arg_mvccid;
	m_header.tran_state = state;
      };

      size_t get_packed_header_size ()
      {
	return s_header_size;
      }

      size_t get_data_packed_size (void);
      void set_header_data_size (const size_t &data_size);

      cubstream::entry<replication_object>::packable_factory *get_builder ();

      cubpacking::packer *get_packer ()
      {
	return &m_serializator;
      }

      cubpacking::unpacker *get_unpacker ()
      {
	return &m_deserializator;
      }

      void set_mvccid (MVCCID mvccid)
      {
	m_header.mvccid = mvccid;
      }

      MVCCID get_mvccid ()
      {
	return m_header.mvccid;
      }

      void set_state (stream_entry_header::TRAN_STATE state)
      {
	m_header.tran_state = state;
      }

      bool is_group_commit (void)
      {
	return m_header.tran_state == stream_entry_header::GROUP_COMMIT;
      }

      bool is_tran_commit (void)
      {
	return m_header.tran_state == stream_entry_header::COMMITTED;
      }

      bool is_tran_abort (void)
      {
	return m_header.tran_state == stream_entry_header::ABORTED;
      }

      int pack_stream_entry_header ();
      int unpack_stream_entry_header ();
      int get_packable_entry_count_from_header (void);

      bool is_equal (const cubstream::entry<replication_object> *other);
      static size_t compute_header_size (void);

      static size_t s_header_size;
  };

} /* namespace cubreplication */

#endif /* _REPLICATION_STREAM_ENTRY_HPP_ */
