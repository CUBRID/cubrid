/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    antlr
    java
    application
}

repositories {
    mavenLocal()

    // Use Maven Central for resolving dependencies.
    mavenCentral()

    // CUBRID JDBC
    var jdbc_path = project.properties["cubridJdbcPath"]
    if (jdbc_path != null) {
        // find cubrid-jdbc in local submodule path
        flatDir {
            dirs("$jdbc_path")
        }
    } else {
        // find in cubrid's artifactory repository
        maven {
            url = uri("http://maven.cubrid.org/")
            isAllowInsecureProtocol = true
        }
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")

    // Unix Domain Socket
    implementation("com.kohlschutter.junixsocket:junixsocket-core:2.6.2")
    implementation("com.kohlschutter.junixsocket:junixsocket-server:2.6.2")

    // ANTLR
    antlr("org.antlr:antlr4:4.9.3")

    implementation("org.apache.commons:commons-text:1.10.0")
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.antlr:antlr4-runtime:4.9.3")

    // CUBRID JDBC
    implementation("cubrid:cubrid-jdbc:latest.integration")
}

// Antlr
tasks.generateGrammarSource {
    // outputDirectory = file("${project.buildDir}/generated-src/antlr")
    arguments = arguments + listOf("-listener","-visitor")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("com.cubrid.jsp.Server")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.jar {
    // To make fat Jar
    val dependencies = configurations
        .runtimeClasspath
        .get()
        .map(::zipTree) // OR .map { zipTree(it) }
    from(dependencies)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
