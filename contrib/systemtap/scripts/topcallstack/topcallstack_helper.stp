/*
 * Copyright 2008 Search Solution Corporation
 * Copyright 2016 CUBRID Corporation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

/*
 * CUBRID SystemTap Support
 *
 * USAGE: stap -k topcallstack_helper.stp -g -D MAXSTRINGLEN=1024
 *
 * DESCRIPTION: 
 *
 * This scripts gathers the backtraces of allocation function calls and provides
 * an output that will be parsed by the topcallstack script.
 *
 * NOTE:
 * This script must run in guru mode. This -g option is mandatory.
 * In order to correctly print the backtrace strings, MAXSTRINGLEN must be overw
 * overwritten with -D option.
 */

global alloc_stack;
global alloc_amount;

function get_callstack_str:string () %{ /* pragma:unwind */ /* pragma:symbols */
/* myproc-unprivileged */ /* pragma:uprobes */ /* pragma:vma */

   _stp_stack_user_sprint(STAP_RETVALUE, MAXSTRINGLEN, CONTEXT, _STP_SYM_SYMBOL | _STP_SYM_HEX_SYMBOL | _STP_SYM_OFFSET | _STP_SYM_NEWLINE);
%}

probe process("cub_server").library("libcubrid.so").function("db_private_alloc_release")
{
 callstack_str = get_callstack_str();

 alloc_stack[callstack_str]++;
 alloc_amount[callstack_str]=$$parms;
}

probe process("cub_server").library("*").function("malloc")
{
 callstack_str = get_callstack_str();

 alloc_stack[callstack_str]++;
 alloc_amount[callstack_str]=$$parms;
}

probe timer.ms(100), end
{
  foreach (stack in alloc_stack) {
    printf("<callstack>\n");
    printf("%s\n", stack);
    printf("</callstack>\n");
    printf("<count>%d</count>\n", alloc_stack[stack]);
    printf("<amount>%s</amount>\n", alloc_amount[stack]);
  }
  delete alloc_stack
  delete alloc_amount
}
